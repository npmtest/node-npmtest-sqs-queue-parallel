{"/home/travis/build/npmtest/node-npmtest-sqs-queue-parallel/test.js":"/* istanbul instrument in package npmtest_sqs_queue_parallel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sqs-queue-parallel/lib.npmtest_sqs_queue_parallel.js":"/* istanbul instrument in package npmtest_sqs_queue_parallel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sqs_queue_parallel = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sqs_queue_parallel = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sqs-queue-parallel/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sqs-queue-parallel && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sqs_queue_parallel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sqs_queue_parallel\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sqs_queue_parallel.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sqs_queue_parallel.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sqs_queue_parallel.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sqs_queue_parallel.__dirname + '/lib.npmtest_sqs_queue_parallel.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sqs-queue-parallel/node_modules/sqs-queue-parallel/dist/sqs-queue-parallel.js":"/**\n * sqs-queue-parallel 0.1.6 <https://github.com/bigluck/sqs-queue-parallel>\n * Create a poll of Amazon SQS queue watchers and each one can receive 1+ messages\n *\n * Available under MIT license <https://github.com/bigluck/sqs-queue-parallel/raw/master/LICENSE>\n */\n(function() {\n  var AWS, SqsQueueParallel, async, events, globalConfig, _,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __slice = [].slice;\n\n  AWS = require('aws-sdk');\n\n  events = require('events');\n\n  async = require('async');\n\n  _ = require('lodash');\n\n  globalConfig = {};\n\n  module.exports = SqsQueueParallel = (function(_super) {\n    __extends(SqsQueueParallel, _super);\n\n    SqsQueueParallel.configure = function(config) {\n      if (config == null) {\n        config = {};\n      }\n      return globalConfig = _.extend(globalConfig, config);\n    };\n\n    function SqsQueueParallel(config) {\n      var readQueue, self;\n      if (config == null) {\n        config = {};\n      }\n      this.config = _.extend({\n        region: process.env.AWS_REGION,\n        accessKeyId: process.env.AWS_ACCESS_KEY,\n        secretAccessKey: process.env.AWS_SECRET_KEY,\n        visibilityTimeout: null,\n        waitTimeSeconds: 20,\n        maxNumberOfMessages: 1,\n        name: '',\n        concurrency: 1,\n        debug: false\n      }, globalConfig, config);\n      this.client = null;\n      this.url = null;\n      self = this;\n      readQueue = function(index) {\n        if (!(self.listeners(\"message\").length && self.url)) {\n          return;\n        }\n        return async.waterfall([\n          function(next) {\n            var options;\n            if (self.config.debug) {\n              console.log(\"SqsQueueParallel \" + self.config.name + \"[\" + index + \"]: waiting messages\");\n            }\n            return self.client.receiveMessage((options = {\n              QueueUrl: self.url,\n              AttributeNames: [\"All\"],\n              MaxNumberOfMessages: self.config.maxNumberOfMessages,\n              WaitTimeSeconds: self.config.waitTimeSeconds\n            }, self.config.visibilityTimeout != null ? options.VisibilityTimeout = self.config.visibilityTimeout : void 0, options), next);\n          }, function(queue, next) {\n            var _ref;\n            if (!((_ref = queue.Messages) != null ? _ref[0] : void 0)) {\n              return next(null);\n            }\n            if (self.config.debug) {\n              console.log(\"SqsQueueParallel \" + self.config.name + \"[\" + index + \"]: \" + queue.Messages.length + \" new messages\");\n            }\n            return async.eachSeries(queue.Messages, function(message, next) {\n              return self.emit(\"message\", {\n                type: 'message',\n                data: JSON.parse(message.Body) || message.Body,\n                message: message,\n                metadata: queue.ResponseMetadata,\n                url: self.url,\n                name: self.config.name,\n                next: next,\n                deleteMessage: function(cb) {\n                  return self.deleteMessage(message.ReceiptHandle, cb);\n                },\n                delay: function(timeout, cb) {\n                  return self.changeMessageVisibility(message.ReceiptHandle, timeout, cb);\n                },\n                changeMessageVisibility: function(timeout, cb) {\n                  return self.changeMessageVisibility(message.ReceiptHandle, timeout, cb);\n                }\n              });\n            }, function() {\n              return next(null);\n            });\n          }\n        ], function(err) {\n          if (err) {\n            self.emit.apply(self, [\"error\"].concat(__slice.call(arguments)));\n          }\n          return process.nextTick(function() {\n            return readQueue(index);\n          });\n        });\n      };\n      this.addListener('newListener', function(name) {\n        if (name !== 'message') {\n          return;\n        }\n        if (self.config.debug) {\n          console.info(\"SqsQueueParallel \" + self.config.name + \": new listener\");\n        }\n        if (!this.client || this.listeners(\"message\").length === 1) {\n          return this.connect(function(err) {\n            if (err || !self.url || !self.listeners(\"message\").length) {\n              return;\n            }\n            return _.times(self.config.concurrency || 1, function(index) {\n              return readQueue(index);\n            });\n          });\n        }\n      });\n      if (this.config.debug) {\n        this.on('connection', function(urls) {\n          return console.log(\"SqsQueueParallel: connection to SQS\", urls);\n        });\n        this.on('connect', function() {\n          return console.log(\"SqsQueueParallel \" + self.config.name + \": connected with url `\" + self.url + \"`\");\n        });\n        this.on('error', function(e) {\n          return console.log(\"SqsQueueParallel \" + self.config.name + \": connection failed\", e);\n        });\n      }\n    }\n\n    SqsQueueParallel.prototype.connect = function(cb) {\n      var self;\n      if (!(this.client && this.url)) {\n        this.once('connect', function() {\n          return cb(null);\n        });\n        if (this.client && !this.url) {\n          return;\n        }\n      }\n      if (this.client) {\n        return cb(null);\n      }\n      self = this;\n      this.client = new AWS.SQS({\n        region: this.config.region,\n        accessKeyId: this.config.accessKeyId,\n        secretAccessKey: this.config.secretAccessKey\n      });\n      async.waterfall([\n        function(next) {\n          return self.client.listQueues({\n            QueueNamePrefix: self.config.name\n          }, next);\n        }, function(data, next) {\n          var re, url, _i, _len, _ref;\n          re = new RegExp(\"/[\\\\d]+/\" + self.config.name + \"$\");\n          self.emit('connection', data.QueueUrls);\n          _ref = data.QueueUrls;\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            url = _ref[_i];\n            if (re.test(url)) {\n              self.emit('connect', self.url = url);\n            }\n          }\n          if (!self.url) {\n            self.emit('error', new Error('Queue not found'));\n            return next('Queue not found');\n          }\n        }\n      ], function(err) {\n        if (!err) {\n          return;\n        }\n        self.emit('error', err);\n        return cb.apply(null, arguments);\n      });\n      return this;\n    };\n\n    SqsQueueParallel.prototype.sendMessage = function(message, cb) {\n      var self;\n      if (message == null) {\n        message = {};\n      }\n      if (cb == null) {\n        cb = function() {};\n      }\n      self = this;\n      this.connect(function(err) {\n        var params;\n        if (err) {\n          return cb.apply(null, arguments);\n        }\n        if (self.config.debug) {\n          console.log(\"SqsQueueParallel \" + self.config.name + \": before sendMessage with url `\" + self.url + \"`\");\n        }\n        params = {\n          MessageBody: JSON.stringify(message.body || {}),\n          QueueUrl: self.url\n        };\n        if (message.delay != null) {\n          params.DelaySeconds = message.delay;\n        }\n        return self.client.sendMessage(params, cb);\n      });\n      return this;\n    };\n\n    SqsQueueParallel.prototype.deleteMessage = function(receiptHandle, cb) {\n      var self;\n      if (cb == null) {\n        cb = function() {};\n      }\n      self = this;\n      this.connect(function(err) {\n        if (err) {\n          return cb.apply(null, arguments);\n        }\n        if (self.config.debug) {\n          console.log(\"SqsQueueParallel \" + self.config.name + \": before deleteMessage \" + receiptHandle + \" with url `\" + self.url + \"`\");\n        }\n        return self.client.deleteMessage({\n          QueueUrl: self.url,\n          ReceiptHandle: receiptHandle\n        }, cb);\n      });\n      return this;\n    };\n\n    SqsQueueParallel.prototype.changeMessageVisibility = function(receiptHandle, timeout, cb) {\n      var self;\n      if (timeout == null) {\n        timeout = 30;\n      }\n      if (cb == null) {\n        cb = function() {};\n      }\n      self = this;\n      this.connect(function(err) {\n        if (err) {\n          return cb.apply(null, arguments);\n        }\n        if (self.config.debug) {\n          console.log(\"SqsQueueParallel \" + self.config.name + \": before changeMessageVisibility \" + receiptHandle + \" with url `\" + self.url + \"`\");\n        }\n        return self.client.changeMessageVisibility({\n          QueueUrl: self.url,\n          ReceiptHandle: receiptHandle,\n          VisibilityTimeout: timeout\n        }, cb);\n      });\n      return this;\n    };\n\n    return SqsQueueParallel;\n\n  })(events.EventEmitter);\n\n}).call(this);\n"}